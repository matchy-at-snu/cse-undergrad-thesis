
@article{rivest_method_nodate,
	title = {A {Method} for {Obtaining} {Digital} {Signatures} and {Public}-{Key} {Cryptosystems}},
	abstract = {An encryption method is presented with the novel property that publicly revealing an encryption key does not thereby reveal the corresponding decryption key. This has two important consequences: 1. Couriers or other secure means are not needed to transmit keys, since a message can be enciphered using an encryption key publicly revealed by the intended recipient. Only he can decipher the message, since only he knows the corresponding decryption key.},
	language = {en},
	author = {Rivest, R L and Shamir, A and Adleman, L},
	pages = {15},
	file = {Rivest et al. - A Method for Obtaining Digital Signatures and Publ.pdf:C\:\\Users\\Match\\Zotero\\storage\\4JPDLHCU\\Rivest et al. - A Method for Obtaining Digital Signatures and Publ.pdf:application/pdf},
}

@article{diffie_new_1976,
	title = {New directions in cryptography},
	volume = {22},
	issn = {1557-9654},
	doi = {10.1109/TIT.1976.1055638},
	abstract = {Two kinds of contemporary developments in cryptography are examined. Widening applications of teleprocessing have given rise to a need for new types of cryptographic systems, which minimize the need for secure key distribution channels and supply the equivalent of a written signature. This paper suggests ways to solve these currently open problems. It also discusses how the theories of communication and computation are beginning to provide the tools to solve cryptographic problems of long standing.},
	number = {6},
	journal = {IEEE Transactions on Information Theory},
	author = {Diffie, W. and Hellman, M.},
	month = nov,
	year = {1976},
	note = {Conference Name: IEEE Transactions on Information Theory},
	pages = {644--654},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Match\\Zotero\\storage\\JXI9ASL7\\authors.html:text/html},
}

@misc{malkin_experimenting_1999,
	title = {Experimenting with {Shared} {Generation} of {RSA} keys},
	abstract = {We describe an implementation of a distributed algorithm to generate a shared RSA key. At the end of the computation, an RSA modulus N = pq is publicly known. All servers involved in the computation are convinced that N is a product of two large primes, however none of them know the factorization of N . In addition, a public encryption exponentispublicly known and each server holds a share of the private exponent. Such a sharing of an RSA key has many applications and can be used to secure sensitive private keys. Previously, the only known method to generate a shared RSA key was through a trusted dealer. Our implementation demonstrates the e\#ectiveness of shared RSA key generation, eliminating the need for a trusted dealer. 1 Introduction To protect an RSA private key, one may break it into a number of pieces \#shares\# and store each piece at a separate location. Sensitive private keys, such as Certi\#cation Authority \#CA\# keys, can be protected in this way. Fortunately, for the RSA cr...},
	author = {Malkin, Michael and Wu, Thomas and Boneh, Dan},
	year = {1999},
	file = {Citeseer - Full Text PDF:C\:\\Users\\Match\\Zotero\\storage\\PBESP3XU\\Malkin et al. - 1999 - Experimenting with Shared Generation of RSA keys.pdf:application/pdf;Citeseer - Snapshot:C\:\\Users\\Match\\Zotero\\storage\\3XUGQDEV\\download.html:text/html},
}

@inproceedings{boneh_efficient_1997,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Efficient generation of shared {RSA} keys},
	isbn = {978-3-540-69528-8},
	doi = {10.1007/BFb0052253},
	abstract = {We describe efficient techniques for three (or more) parties to jointly generate an RSA key. At the end of the protocol an RSA modulus N = pq is publicly known. None of the parties know the factorization of N. In addition a public encryption exponent is publicly known and each party holds a share of the private exponent that enables threshold decryption. Our protocols are efficient in computation and communication.},
	language = {en},
	booktitle = {Advances in {Cryptology} — {CRYPTO} '97},
	publisher = {Springer},
	author = {Boneh, Dan and Franklin, Matthew},
	editor = {Kaliski, Burton S.},
	year = {1997},
	keywords = {Multiparty computation, Primality testing, RSA, Threshold Cryptography},
	pages = {425--439},
	file = {Full Text PDF:C\:\\Users\\Match\\Zotero\\storage\\77FUFXBE\\Boneh and Franklin - 1997 - Efficient generation of shared RSA keys.pdf:application/pdf},
}

@inproceedings{catalano_computing_2000,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Computing {Inverses} over a {Shared} {Secret} {Modulus}},
	isbn = {978-3-540-45539-4},
	doi = {10.1007/3-540-45539-6_14},
	abstract = {We discuss the following problem: Given an integer φ shared secretly among n players and a prime number e, how can the players efficiently compute a sharing of e−1 mod φ. The most interesting case is when φ is the Euler function of a known RSA modulus N, φ = φ(N). The problem has several applications, among which the construction of threshold variants for two recent signature schemes proposed by Gennaro-Halevi-Rabin and Cramer-Shoup.},
	language = {en},
	booktitle = {Advances in {Cryptology} — {EUROCRYPT} 2000},
	publisher = {Springer},
	author = {Catalano, Dario and Gennaro, Rosario and Halevi, Shai},
	editor = {Preneel, Bart},
	year = {2000},
	keywords = {Malicious Adversary, Modular Exponentiation, Private Input, Public Input, Signature Scheme},
	pages = {190--206},
	file = {Full Text PDF:C\:\\Users\\Match\\Zotero\\storage\\VR7PPV7R\\Catalano et al. - 2000 - Computing Inverses over a Shared Secret Modulus.pdf:application/pdf},
}

@article{evans_pragmatic_2018,
	title = {A {Pragmatic} {Introduction} to {Secure} {Multi}-{Party} {Computation}},
	volume = {2},
	issn = {2474-1558, 2474-1566},
	url = {https://www.nowpublishers.com/article/Details/SEC-019},
	doi = {10.1561/3300000019},
	abstract = {A Pragmatic Introduction to Secure Multi-Party Computation},
	language = {English},
	number = {2-3},
	urldate = {2022-06-15},
	journal = {SEC},
	author = {Evans, David and Kolesnikov, Vladimir and Rosulek, Mike},
	month = dec,
	year = {2018},
	note = {Publisher: Now Publishers, Inc.},
	pages = {70--246},
	file = {Full Text PDF:C\:\\Users\\Match\\Zotero\\storage\\3Y8PDW3B\\Evans et al. - 2018 - A Pragmatic Introduction to Secure Multi-Party Com.pdf:application/pdf},
}

@inproceedings{yao_protocols_1982,
	title = {Protocols for secure computations},
	doi = {10.1109/SFCS.1982.38},
	abstract = {The author investigates the following problem: Suppose m people wish to compute the value of a function f(x1, x2, x3, ..., xm), which is an integer-valued function of m integer variables xi of bounded range. Assume initially person Pi knows the value of xi and no other x's. Is it possible for them to compute the value of f, by communicating among themselves, without unduly giving away any information about the values of their own variables? The author gives a precise formulation of this general problem and describe three ways of solving it by use of one-way functions (i.e., functions which are easy to evaluate but hard to invert). These results have applications to secret voting, private querying of database, oblivious negotiation, playing mental poker, etc.. He also discusses the complexity question "How many bits need to be exchanged for the computation," and describes methods to prevent participants from cheating. Finally, he studies the question "What cannot be accomplished with one-way functions."},
	booktitle = {23rd {Annual} {Symposium} on {Foundations} of {Computer} {Science} (sfcs 1982)},
	author = {Yao, Andrew C.},
	month = nov,
	year = {1982},
	note = {ISSN: 0272-5428},
	keywords = {Algorithm design and analysis, Cryptography, Databases, Privacy, Protocols, Security, Stochastic processes, Telephony, Voting},
	pages = {160--164},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Match\\Zotero\\storage\\KE276VL3\\4568388.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Match\\Zotero\\storage\\G9ZJ48EP\\Yao - 1982 - Protocols for secure computations.pdf:application/pdf},
}
